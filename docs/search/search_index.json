{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#joknarf-tools","title":"Joknarf Tools","text":"<p>Welcome to the documentation of all my daily shell productivity tools.</p>"},{"location":"#shell-plugins","title":"Shell plugins:","text":"<ul> <li>thefly Shell plugin manager / env teleporter</li> <li>shell-ng All joknarf plugins in one (nerdp/redo/seedee/complete-ng/selector)</li> <li>selector Shell interactive menu plugin</li> <li>nerpd Nerd prompt for bash/zsh/ksh</li> <li>redo Interactive command history menu / completion</li> <li>seedee Interactive directory history menu / completion</li> <li>complete-ng Command line completion interactive</li> </ul>"},{"location":"#command-line-tools","title":"Command line tools:","text":"<ul> <li>pgtree Unix process hierachy tree display / search / kill</li> <li>run-para Parallel jobs manager TUI with live output</li> <li>ssh-para Parallel SSH jobs manager TUI</li> <li>portune multithreaded port scanner / html report</li> <li>mkshz self-extractring shell archive packager</li> <li>targpg tar command with gpg encrypt/decrypt </li> </ul>"},{"location":"#web-tools-embedded-servers","title":"Web tools embedded servers:","text":"<ul> <li>pywebfs Simple http(s) file ferver</li> <li>pywebexec http(s) API/web server command launcher and terminal sharing</li> </ul>"},{"location":"#fuse-filesystems","title":"Fuse filesystems:","text":"<ul> <li>fuse-sshautofs fuse automount sshfs filesystems accessing hostname dir</li> <li>fuse-memfs Simple fuse memory fs</li> </ul>"},{"location":"complete-ng/","title":"Complete-ng","text":""},{"location":"complete-ng/#complete-ng","title":"complete-ng","text":"<p>bash/zsh completion nextgen</p> <ul> <li>replace bash/zsh completion multiple choices output by interactive selector menu</li> <li>browse directories inside the menu</li> <li>view/edit files directly from the menu</li> <li>single tab on command line displays choices</li> <li>launch menu from empty command line with Tab to browse files/directories</li> </ul> <p>for a complete next-gen shell experience, see also this project:</p> <ul> <li>joknarf/shell-ng:</li> <li>auto-transportable dynamic PS1 prompt (you can see it in the demo)</li> <li>completion nextgen (this plugin)</li> <li>replacement of shell history command search (CtrlR or Esc/) with interactive menu</li> <li>directory history navigation with arrows + interactive menu</li> </ul>"},{"location":"complete-ng/#usage","title":"usage","text":"<pre><code>git clone https://github.com/joknarf/complete-ng\nsource complete-ng/complete-ng.plugin.bash\nor\nsource complete-ng/complete-ng.plugin.zsh\n</code></pre>"},{"location":"complete-ng/#example","title":"example","text":""},{"location":"complete-ng/#filefolder-icons","title":"file/folder icons","text":"<p>As depending to your terminal font, the icons may not render correctly, you can choose the icons you want using environment variables, here are some sample of dir/file icons, choose the ones fitting your terminal font (use nerd version of your font to have more choice):</p> <pre><code>SELECTOR_FOLDER_ICON='\uf07b' # \ud83d\uddbf \ud83d\uddc0 \ud83d\udcc1 \ud83d\udcc2 \ud83d\uddbf  \ue5ff  \ue6ad  \ue613 \uf07b \uf114 \nSELECTOR_FILE_ICON='\uf016'   # \ue64a \ud83d\uddce \ue64e \ue612 \ue29a \ue714 \ue7a3 \uf0c5 \uf096 \uf0c9 \uf1c9 \uf016 \uea7b \ud83d\uddcb \ud83d\uddb9 \uf15b \uf15c\n</code></pre>"},{"location":"complete-ng/#keys-in-menu","title":"keys in menu","text":"key action \u25bc select next item \u25b2 select prev item End select last item Home select first item \u25b6 browse selected directory \u25c0 browse parent directory F3 view file using PAGER (or less) F4 edit file usint EDITOR (or vi) Shift\u25bc/PgUp/CtlF next page Shift\u25b2/PgDn/CtlB previous page Esc exit CtrlA use all screen to display menu Enter/Tab put selected item on command line"},{"location":"fuse-memfs/","title":"Fuse-memfs","text":""},{"location":"fuse-memfs/#fuse-memfs","title":"fuse-memfs","text":"<p>Simple fuse memory filesystem</p>"},{"location":"fuse-memfs/#usage","title":"usage","text":"<pre><code>$ memfs &lt;mountpoint&gt;\n</code></pre>"},{"location":"fuse-sshautofs/","title":"Fuse-sshautofs","text":""},{"location":"fuse-sshautofs/#sshautofs","title":"sshautofs","text":"<p>fuse automount sshfs filesystems Access any remote server filesystems through a <code>&lt;hostname&gt;</code> directory  </p> <ul> <li>automatic access to servers filesystems through fuse-sshfs when accessing <code>&lt;mountpoint&gt;/&lt;server&gt;</code></li> <li>transparently use sshfs to mount <code>sshfs &lt;server&gt;:/ &lt;mountpoint&gt;-ssh/&lt;server&gt;</code></li> <li>creates symlink <code>&lt;mountpoint&gt;/&lt;server&gt; -&gt; &lt;mountpoint&gt;-ssh/&lt;server&gt;</code> to access</li> <li>automatic unmount after timeout</li> <li>special cmd directory allow specific remote commands on servers</li> </ul>"},{"location":"fuse-sshautofs/#prerequisites","title":"Prerequisites","text":"<ul> <li>fuse sshfs</li> <li>fuse3</li> </ul>"},{"location":"fuse-sshautofs/#usage","title":"Usage","text":"<pre><code>$ sshautofs [-timeout=&lt;duration&gt;] [-F &lt;ssh_config_file&gt;] [-o sshfsopts] [-foreground] [-cmd cmd=\"cmd args\",...] &lt;mountpoint&gt;\n</code></pre>"},{"location":"fuse-sshautofs/#example","title":"Example","text":"<pre><code>$ sshautofs -cmd ps='/bin/ps -ef' ~/servers\n$ cd ~/servers/myhost\n$ ls -l\nlrwxrwxrwx. 1 root root          7 May  1  2023 bin -&gt; usr/bin\ndrwxr-xr-x. 1 root root       4096 Apr  8  2024 bin.usr-is-merged\ndrwxr-xr-x. 1 root root       4096 Apr 18  2022 boot\ndrwxr-xr-x. 1 root root       3860 Jul 11 08:38 dev\ndrwxr-xr-x. 1 root root      12288 Jul 12 07:43 etc\ndrwxr-xr-x. 1 root root       4096 May  8 10:53 home\n-rwxrwxrwx. 1 root root    2724480 Jun  9 20:32 init\n...\n$ tail ~/servers/myhost/var/log/messages\nJul 26 14:55:58 myhost systemd...\n...\n$ cat ~/servers/cmd/myhost/ps\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 Jul09 ?        00:00:06 /usr/lib/systemd/systemd --switched-root --system --deserialize 18\nroot           2       0  0 Jul09 ?        00:00:00 [kthreadd]\n...\n</code></pre> <p>Automatically mounts <code>sshfs myhost:/ ~/servers-ssh/myhost</code> accessible through <code>~/servers/myhost</code> symlink the mount is expiring by default after 10min, the sshfs will be unmounted if not in use. In the special <code>cmd</code> directory, a cat <code>~/servers/cmd/myhost/ps</code> executes <code>ssh myhost 'ps -ef'</code> and display output</p>"},{"location":"fuse-sshautofs/#options","title":"Options","text":"<ul> <li><code>-timeout=1m</code> define expiration timeout to unmount sshfs</li> <li><code>-F ~/ssh/autofs</code> define ssh config file to use for sshfs</li> <li><code>-foreground</code> launch sshautofs in foreground (default daemonize)</li> <li><code>-o ro,reconnect</code> sshfs -o options to pass</li> <li><code>-cmd cmd='cmd args',...</code> commands to expose in <code>cmd</code> special directory</li> </ul>"},{"location":"mkshz/","title":"Mkshz","text":""},{"location":"mkshz/#mkshz","title":"mkshz","text":"<p>self extracting shell gzip tarball packager.  </p> <ul> <li>Simple shell script to generate self extracting shell script with embedded gzipped tarball.  </li> <li>Minimalist universal packager with pre / post install command without any complex package factory to setup.  </li> <li>Simple deployment of application using unique shell script package.</li> <li>Alternative to rpm/deb/... factory for simple projects</li> </ul>"},{"location":"mkshz/#prerequisites","title":"prerequisites","text":"<ul> <li>bash</li> <li>sed (gnu/bsd)</li> <li>tar / gzip</li> </ul> <p>you can use mkshz.compat if using old OS distribution (tar/sed missing features)</p>"},{"location":"mkshz/#usage","title":"usage","text":"<p>usage: <code>mkshz &lt;file.shz&gt; &lt;dir&gt; [&lt;command&gt; [--tmp-exec] [--pre-extract &lt;command&gt;] &lt;tar options&gt;]</code></p> <p>Creates a shell script <code>&lt;file.shz&gt;</code> with embedded tgz archive created from <code>&lt;dir&gt;</code> content. * The script will extract the archive to the current directory on execution. * A <code>&lt;command&gt;</code> in <code>&lt;dir&gt;</code> can be specified to run after extraction with arguments passed to <code>&lt;file.shz&gt;</code>. * A pre-extract <code>&lt;command&gt;</code> in <code>&lt;dir&gt;</code> can be specified to be extracted and run before the whole archive is extracted. * if <code>--tmp-exec</code> flag is set the resulting script will extract to /tmp/shz.XXXX executes the commands and clean the /tmp/shz.XXXXX * shz_version environment variable can be set to get the version of the archive using <code>v-shz</code> parameter.</p> <p>Example usage:</p> <pre><code>$ shz_version=v1.2 mkshz install.shz app/ bin/config.sh --pre-extract bin/pre-stop.bash --exclude=.git --exclude=*.o\n</code></pre> <p>Notes: * The <code>&lt;command&gt;</code> arguments are relative to <code>&lt;dir&gt;</code>. * The script generated will be created with a shebang line for bash. * The pre-extract <code>&lt;command&gt;</code> will be extracted and executed before extracting whole archive * The pre-extract <code>&lt;command&gt;</code> does not receive any arguments. * If the pre-extract <code>&lt;command&gt;</code> exit code is not zero, the script will abort whole extraction.</p>"},{"location":"mkshz/#example","title":"Example","text":"<pre><code>$ shz_version=v1.2 mkshz installapp.shz app bin/setup.sh --pre-extract bin/stopapp.sh --exclude=.git\n</code></pre> <ul> <li>Generated script <code>installapp.shz</code>:</li> </ul> <pre><code>#!/bin/bash                                                                                                                                                                         \n# Script created with mkshz\n# This script extracts embedded tgz archive \n# extract archive directory: 'app'\n# pre-extract command: 'app/bin/stopapp.sh'\n# post-extract command: 'app/bin/config.sh'\n# to extract the archive without command execution, use:\n#  ./installapp.shz x-shz\n# shz_verbose=1 env variable can be set to enable tar output\n# shz_target_dir can be set to specify the target directory for extraction\n#\nversion=\"v1.2\"\ndir=\"app\"\npre=\"app/bin/stopapp.sh\"\ncmd=\"app/bin/config.sh\"\ntmpexec=\"1\"\nshz=\"${0##*/}\"\n[ \"$shz_verbose\" ] &amp;&amp; v=v || v=\"\"\n[ \"$1\" = \"v-shz\" ] &amp;&amp; echo \"$version\" &amp;&amp; exit 0\n[ \"$1\" = \"x-shz\" ] &amp;&amp; cmd=\"\" pre=\"\"\n\n[ ! \"$shz_target_dir\" ] &amp;&amp; [ \"$tmpexec\" ] &amp;&amp; {\n  shz_target_dir=$(mktemp -d /tmp/shz.XXXXXX) || exit 1\n  [ \"$cmd\" ] &amp;&amp; trap 'rm -rf \"$shz_target_dir\"' EXIT\n}\n: ${shz_target_dir:=$PWD}\n\nextract() {\n  sed '1,/^__tgz__/d' \"$0\"| (cd \"$shz_target_dir\" &amp;&amp; tar xz${v}f - \"$@\" &gt;&amp;2) || exit 1\n}\n\n# Pre-extract script:\n[ \"$pre\" ] &amp;&amp; {\n  echo \"$shz: Extracting/Executing pre-extract script: $pre\" &gt;&amp;2\n  extract \"$pre\"\n  \"$shz_target_dir/$pre\" || { echo \"$shz: Error: Failed to execute pre-extract script ($pre)\" &gt;&amp;2; exit 1; }\n}\necho \"$shz: Extracting archive directory '$dir' in '$shz_target_dir'\" &gt;&amp;2\nextract\n[ \"$cmd\" ] || exit 0\ncmd=\"$shz_target_dir/$cmd\"\necho \"$shz: Executing command: $cmd $*\" &gt;&amp;2\n[ ! -x \"$cmd\" ] &amp;&amp; echo \"$shz: Error: Command $cmd not found or not executable.\" &gt;&amp;2 &amp;&amp; exit 1\n\"$cmd\" \"$@\"\nexit $?\n\n__tgz__ ====== binary data starts here ==========================================\n</code></pre> <ul> <li>script execution</li> </ul> <pre><code>user@host:/myapp/distrib $ ./installapp.shz --register myhost\ninstallapp.shz: Extracting/Executing pre-extract script: app/bin/stopapp.sh\n  stopapp.sh: Stopping app\n  stopapp.sh: Done\ninstallapp.shz: Extracting archive directory 'app' in '/myapp/distrib'\ninstallapp.shz: Executing command: app/bin/setup.sh --register myhost\n  config.sh: Configuring app\n  config.sh: Starting app\n</code></pre>"},{"location":"nerdp/","title":"Nerdp","text":""},{"location":"nerdp/#nerdp","title":"nerdp","text":"<p>Nerd prompt for bash/ksh/zsh (mksh/ash) Light version of nerdps1 local nerd prompt w/o psudo/pssh (as thefly is doing plugin teleportation)</p>"},{"location":"nerdp/#font-for-prompt","title":"Font for prompt","text":"<p>For better experience, install a Nerd font on your system/console (Windows console / Windows terminal / putty / git-bash / CmdEr / iTerm2 / Terminator / MobaXterm / VScode terminal / Pycharm terminal...): Consolas NF Nerd Fonts</p> <p>on Unix, copy to <code>~/.fonts</code> and run <code>fc-cache -fv</code> then relaunch your terminal and set the font</p>"},{"location":"nerdp/#installation","title":"Installation","text":"<ul> <li> <p>You can install using a plugin manager like sheldon / zgenom ... : plugin joknarf/nerdp</p> </li> <li> <p>Or you can activate the nerdp prompt directly using: <code>$ . &lt;(curl -s https://raw.githubusercontent.com/joknarf/nerdp/main/nerdp)</code></p> </li> <li>Or you can get your local copy using: <code>$ curl -sL -o ~/nerdp https://raw.githubusercontent.com/joknarf/nerdp/main/nerdp</code> then source it in your profile/rcfile: <code>. ~/nerdp</code></li> </ul> <p></p> <p>Following information displayed:</p> <ul> <li>exit code if command returns code is not 0</li> <li>elapse time during command if command lasts more than 1s (bash / zsh / ksh &gt;2012)</li> <li>user@hostname</li> <li>current working directory</li> <li>git branch if in git directory (colorized according to git status)</li> <li>python VIRTUAL_ENV and other variables values with name in <code>ps1_info</code> variable</li> <li>filesystem usage check of <code>ps1_fslist</code> (default \"/ /tmp\") according to <code>ps1_fslimits</code> (default \"95 100\")</li> <li>1min cpu load (colorized default <code>ps1_loadlimits</code> \"10 20\")</li> <li>Available memory (colorized default <code>ps1_memlimits</code> \"300 100\" MB)</li> <li>Time</li> </ul>"},{"location":"nerdp/#choose-your-style","title":"choose your style","text":"<p>set <code>ps1_style</code> variable to available styles in your .nerdrc You can test using <code>ps1_style</code> function:</p> <p></p>"},{"location":"nerdp/#font-rendering","title":"Font rendering","text":"<p>If your terminal does not manage correctly nerd font symbols, you may switch to more commonly supported powerline font symbols, or even disable the segment separator symbols. You can use : <code>ps1_display</code> function/var to switch prompt display symbol characters:</p> <pre><code>$ ps1_display -h\nusage: ps1_display &lt;option&gt;\n    &lt;option&gt;: nerdicons, nerd, powerline, nofont, ascii\n</code></pre>"},{"location":"nerdp/#customizing-prompt","title":"Customizing prompt","text":"<p>You can add informations on the prompt using ps1_info variable:  </p> <ul> <li><code>ps1_info=\"MYVAR MYVAR2...\"</code> : will display content of variables</li> <li><code>ps1_info=\"(myfunc) (myfunc2)\"</code> : will display output of functions myfunc myfunc2</li> </ul> <p>You can add custom colorized segment defining <code>ps1_addon()</code> function:</p> <ul> <li><code>ps1_addon() { pgrep rsyslogd &gt;/dev/null || echo 'red:syslog'; }</code> output format of function:   <code>&lt;bgcolor&gt;[/&lt;fgcolor&gt;/&lt;sepcolor&gt;]:&lt;message&gt;[|message]</code> empty output discards the segment.</li> </ul> <p>Changing prompt powerline, ps1_powerline variable represents the prompt:</p> <ul> <li>segment setting : <code>symbol/bgcolor/fgcolor/sepcolor:function</code><ul> <li>function called is <code>ps1_function</code> (ps1_ prefixed)</li> <li>colors : <code>black red green yellow blue magenta cyan white</code>, prefix <code>l</code> for light color</li> <li>symbols : <code>&lt; &gt; ( )</code></li> <li>when color is set to auto, the function output must be <code>&lt;color&gt;:&lt;text&gt;</code> else only <code>&lt;text&gt;</code></li> </ul> </li> <li>right alignment separator : <code>|</code></li> <li><code>ps1_powerline=\"(/auto:exit_status (/blue:userhost )/auto:git_branch )/lblack:cwd &gt; | (/lblue/black/blue:info (/auto:freemem (/blue:time )\"</code> </li> <li><code>ps1_powerline=\"auto:exit_status blue:userhost &gt;/auto:git_branch &gt;/lblack:cwd &gt; | &lt;/lblue/black/blue:info &lt;/auto:freemem &lt;/blue:time\"</code> </li> </ul>"},{"location":"nerdp/#color-theme-example","title":"color theme example","text":"<p>used terminal colors in example:</p> <pre><code>        {\n            \"name\": \"NerdPS1\",\n            \"background\": \"#000000\",\n            \"foreground\": \"#D3D7CF\",\n            \"black\": \"#000000\",\n            \"blue\": \"#2760AA\",\n            \"cyan\": \"#06989A\",\n            \"green\": \"#088A5B\",\n            \"purple\": \"#4c3d80\",\n            \"red\": \"#BA1611\",\n            \"white\": \"#D3D7CF\",\n            \"yellow\": \"#CF8700\",\n            \"brightBlack\": \"#243C4F\",\n            \"brightBlue\": \"#729FCF\",\n            \"brightCyan\": \"#34E2E2\",\n            \"brightGreen\": \"#59c566\",\n            \"brightPurple\": \"#AD7FA8\",\n            \"brightRed\": \"#EF2929\",\n            \"brightWhite\": \"#EEEEEC\",\n            \"brightYellow\": \"#FCE94F\"\n        }\n</code></pre>"},{"location":"pgtree/","title":"Pgtree","text":""},{"location":"pgtree/#pgtree","title":"pgtree","text":"<p>Unix process hierachy tree display for specific processes (kind of mixed pgrep + pstree)</p> <p>pgtree is also able to send signal to found processes and all their children</p> <p>The purpose is to have the tool working out of the box on any Unix box, using the default OS python installed, without installing anything else. The code must be compatible with python 2.x + 3.x</p> <p>Should work on any Unix that can execute :</p> <pre><code># /usr/bin/pgrep \n# /usr/bin/ps ax -o pid,ppid,stime,user,ucomm,args\n</code></pre> <p>if <code>pgrep</code> command not available (AIX), pgtree uses built-in pgrep (<code>-f -i -x -u &lt;user&gt;</code> supported).</p> <p><code>-T</code> option to display threads only works if <code>ps ax -T -o spid,ppid</code> available on system (ubuntu/redhat...)</p> <p>pgtree Tested on various versions of RedHat / CentOS / Ubuntu / Debian / Suse / FreeBSD / ArchLinux / MacOS / Solaris / AIX including old versions</p> <p>(uses -o fname on Solaris)</p>"},{"location":"pgtree/#installation","title":"Installation","text":"<p>FYI, the <code>pgtree/pgtree.py</code> is standalone and can be directly copied/used anywhere without any installation.</p> <p>installation using pip:</p> <pre><code># pip install pgtree\n</code></pre>"},{"location":"pgtree/#usage","title":"Usage","text":"<pre><code># pgtree -h\n    usage: pgtree.py [-W] [-RIya] [-C &lt;when&gt;] [-O &lt;psfield&gt;] [-c|-k|-K] [-1|-p &lt;pid1&gt;,...|&lt;pgrep args&gt;]\n\n    -I : use -o uid instead of -o user for ps command\n         (if uid/user mapping is broken ps command can be stuck)\n    -c : display processes and children only \n    -k : kill -TERM processes and children\n    -K : kill -KILL processes and children\n    -y : do not ask for confirmation to kill\n    -R : force use of internal pgrep\n    -C : color preference : y/yes/always or n/no/never (default auto)\n    -w : tty wrap text : y/yes or n/no (default y)\n    -W : watch and follow process tree every 2s\n    -a : use ascii characters\n    -T : display threads (ps -T)\n    -O &lt;psfield&gt;[,psfield,...] : display multiple &lt;psfield&gt; instead of 'stime' in output\n                   &lt;psfield&gt; must be valid with ps -o &lt;psfield&gt; command\n\n    by default display full process hierarchy (parents + children of selected processes)\n\n    -p &lt;pids&gt; : select processes pids to display hierarchy (default 0)\n    -1 : display hierachy children of pid 1 (not including pid 0)\n    &lt;pgrep args&gt; : use pgrep to select processes (see pgrep -h)\n\n    found pids are prefixed with \u25b6\n</code></pre>"},{"location":"pgtree/#examples","title":"Examples","text":"<p>show all parents and children of processes matching <code>bash</code></p> <p></p> <p>show processes matching <code>bash</code> and their children</p> <p></p> <p>kill all <code>sh</code> processes of user joknarf and their children</p> <p></p> <p>Customize ps output fields:</p> <p></p> <p>Put default options in PGTREE env variable:</p> <pre><code># export PGTREE='-1 -O %cpu,stime -C y'\n# pgtree\n</code></pre> <p>Use watch utility to follow process tree:</p> <pre><code># pgtree -W bash\n</code></pre> <p></p>"},{"location":"pgtree/#demo","title":"Demo","text":""},{"location":"portune/","title":"Portune","text":""},{"location":"portune/#portune","title":"portune","text":"<p>Multithreaded port scanner</p>"},{"location":"portune/#features","title":"features","text":"<ul> <li>parallel check of port availability against servers/ports</li> <li>console output result / summary</li> <li>html full report / dns domain summary / vlan timeout summary</li> <li>mail with html summary / report attachment (mailhost relay)</li> </ul>"},{"location":"pywebexec/","title":"Pywebexec","text":""},{"location":"pywebexec/#pywebexec","title":"pywebexec","text":"<p>Simple Python HTTP(S) API/Web Server Command Launcher and Terminal sharing</p> <ul> <li>build a Restfull API/swagger-ui powered application in no time exposing simple commands/parameters.</li> <li>create a toolbox with batch management/parallel execution of commands</li> <li>share a terminal in one command</li> </ul>"},{"location":"pywebexec/#install","title":"Install","text":"<pre><code>$ pip install pywebexec\n</code></pre>"},{"location":"pywebexec/#quick-start","title":"Quick start","text":"<ul> <li>share terminal</li> <li>start http server and spawn a new terminal shared on 0.0.0.0 port 8080 (defaults)</li> <li>exiting terminal stops server/share</li> </ul> <pre><code>$ pywebexec shareterm\n</code></pre> <ul> <li>serve executables</li> <li>put in a directory the scripts/commands/links to commands you want to expose</li> <li>start http server serving current directory executables listening on 0.0.0.0 port 8080</li> </ul> <pre><code>$ pywebexec -d &lt;dir&gt;\n</code></pre> <ul> <li>Launch commands with params/view live output/Status using browser</li> <li>Share your terminal output using <code>pywebexec -d &lt;dir&gt; term</code></li> </ul> <p>all commands output / statuses are available in the executables directory in subdirectory <code>.web_status</code></p>"},{"location":"pywebexec/#features","title":"features","text":"<ul> <li>Serve executables in a directory</li> <li>full API driven with dynamic swagger UI</li> <li>Launch commands with params from web browser or API call</li> <li>multiple share terminal output</li> <li>Follow live output</li> <li>Replay terminal history</li> <li>Stop command</li> <li>Relaunch command</li> <li>HTTPS support</li> <li>HTTPS self-signed certificate generator</li> <li>Basic Auth</li> <li>LDAP(S) password check/group member</li> <li>Safe url token generation</li> <li>Can be started as a daemon (POSIX)</li> <li>Uses gunicorn to serve http/https</li> <li>Linux/MacOS compatible</li> <li>Markdown help for commands</li> <li>YAML schema for commands parameters</li> <li>Batch/parallel command execution</li> </ul>"},{"location":"pywebexec/#customize-server","title":"Customize server","text":"<pre><code>$ pywebexec --dir ~/myscripts --listen 0.0.0.0 --port 8080 --title myscripts\n$ pywebexec -d ~/myscripts -l 0.0.0.0 -p 8080 -t myscripts\n</code></pre>"},{"location":"pywebexec/#sharing-terminals","title":"Sharing terminals","text":"<ul> <li>start server and share tty in one command</li> </ul> <pre><code>$ pywebexec -d ~/webshare shareterm\n</code></pre> <ul> <li>share tty with an already pywebexec server started</li> </ul> <pre><code>$ pywebexec -d ~/webshare term\n</code></pre> <p>if another user need to share his terminal, he need to have write permission on <code>&lt;dir&gt;/.web_status</code> directory.</p>"},{"location":"pywebexec/#safe-url-token","title":"Safe url token","text":"<ul> <li>generate safe url, use the url to access the server</li> </ul> <pre><code>$ pywebexec -T\n$ pywebexec --tokenurl\nStarting server:\nhttp://&lt;host&gt;:8080?token=jSTWiNgEVkddeEJ7I97x2ekOeaiXs2mErRSKNxm3DP0\nhttp://x.x.x.x:8080?token=jSTWiNgEVkddeEJ7I97x2ekOeaiXs2mErRSKNxm3DP0\n</code></pre>"},{"location":"pywebexec/#basic-auth","title":"Basic auth","text":"<ul> <li>single user/password</li> </ul> <pre><code>$ pywebexec --user myuser [--password mypass]\n$ pywebexec -u myuser [-P mypass]\n</code></pre> <p>Generated password is given if no <code>--pasword</code> option</p> <ul> <li>ldap(s) password check / group member ldap server must accept memberOf attribute for group members</li> </ul> <pre><code>$ export PYWEBEXEC_LDAP_SERVER=ldaps://ldap.mydomain.com:389\n$ export PYWEBEXEC_LDAP_BIND_DN=\"cn=read-only-admin,dc=example,dc=com\"\n$ export PYWEBEXEC_LDAP_BIND_PASSWORD=\"password\"\n$ export PYWEBEXEC_LDAP_BASE_DN=\"dc=example,dc=com\"\n$ export PYWEBEXEC_LDAP_USER_ID=\"uid\" # sAMAccountName for AD\n$ export PYWEBEXEC_LDAP_GROUPS=\"ou=mathematicians,dc=example,dc=com ou=scientists,dc=example,dc=com\"\n$ pywebexec\n</code></pre>"},{"location":"pywebexec/#https-server","title":"HTTPS server","text":"<ul> <li>Generate auto-signed certificate and start https server</li> </ul> <pre><code>$ pywebexec --gencert\n$ pywebexec --g\n</code></pre> <ul> <li>Start https server using existing certificate</li> </ul> <pre><code>$ pywebexec --cert /pathto/host.cert --key /pathto/host.key\n$ pywebexec -c /pathto/host.cert -k /pathto/host.key\n</code></pre>"},{"location":"pywebexec/#launch-server-as-a-daemon","title":"Launch server as a daemon","text":"<pre><code>$ pywebexec start\n$ pywebexec status\n$ pywebexec stop\n</code></pre> <ul> <li>log of server are stored in directory <code>~/[.config/].pywebexec/pywebexec_&lt;listen&gt;:&lt;port&gt;.log</code></li> </ul>"},{"location":"pywebexec/#launch-command-through-api","title":"Launch command through API","text":"<pre><code>$ curl http://myhost:8080/commands/myscript -H 'Content-Type: application/json' -X POST -d '{\"params\":[\"param1\", ...]}'\n$ curl http://myhost:8080/commands/&lt;command_id&gt;\n$ curl http://myhost:8080/commands/&lt;command_id&gt;/output -H \"Accept: text/plain\"\n</code></pre>"},{"location":"pywebexec/#add-markdown-help-to-commands","title":"Add markdown help to commands","text":"<p>For each exposed command, you can add a help message by creating a file named <code>&lt;command&gt;.help</code> in the same directory as the command. The help message must be written in markdown. The help message is displayed:</p> <ul> <li>in the web interface as tooltip when focused on param input field,</li> <li>in the response when calling the API <code>/executables</code></li> <li>in the swagger-ui in the <code>/commands/&lt;command&gt;</code> route.</li> </ul> <p></p>"},{"location":"pywebexec/#add-schema-to-commands","title":"Add schema to commands","text":"<p>For each exposed command, you can add a schema by creating a file named <code>&lt;command&gt;.schema.yaml</code> in the same directory as the command. The schema must be written in yaml format. The schema is used to generate a form in the web interface and in the swagger-ui in the <code>/commands/&lt;command&gt;</code> route. The schema is also used to validate the input parameters when calling the API <code>/commands/&lt;command&gt;</code>. The schema must be written in the openapi schema format.</p> <pre><code>type: object\nproperties:\n  param1:\n    type: string\n    description: \"param1 description\"\n    example: \"value\"\n  param2:\n    type: integer\n    description: \"param2 description\"\n    enum: [1, 2, 3]\n  param3:\n    type: array\n    items:\n      type: string\n    description: \"param3 description\"\n    example: [\"value1\", \"value2\"]\nrequired:\n  - param1\n  - param2\n</code></pre> <p>The payload will be converted to command line arguments when calling the command.</p> <pre><code>command --param1 value --param2 1 --param3 value1 value2\n</code></pre> <ul> <li>On the web inferface, and swagger-ui the form will be generated from the schema.</li> </ul> <p></p> <p>When using schema, the command can now be launched with:</p> <pre><code>$ curl -X POST http://&lt;srv&gt;/commands/&lt;cmd&gt; -H \"Content-Type: application/json\" -d '{\"param1\": \"value\", \"param2\": 1, \"param3\": [\"value1\", \"value2\"]}'\n</code></pre>"},{"location":"pywebexec/#schema-options","title":"Schema options","text":"<p>The schema options are used to customize the command line arguments generation, just add a <code>schema_options</code> section to the schema.</p> <pre><code>schema_options:\n  separator_params: {\"*\": \" \", \"param2\": \"=\"}}\"=\" # --param2=value (default is \" \") \n  noprefix_params: [\"param1\", \"param2\"] # omit --param prefix, use \"*\" to omit all\n  convert_params: {\"param1\": \"param2\"} # convert param1 to param2\n</code></pre>"},{"location":"pywebexec/#batch-commandsparallel-execution","title":"Batch commands/parallel execution","text":"<p>Integration of run-para to enable batch execution of commands:</p> <ul> <li>In <code>schema_options</code> adding <code>batch_param</code> will enable batch mode for the command, the command will be executed for each value in the <code>batch_param</code> list.  </li> <li>The <code>batch_param</code> is the name of the parameter that will be used to pass the different values for the parameter.  </li> <li>The <code>batch_param</code> type will be transformed to textarea to provide list to use as parameter for the command.  </li> <li>The range parameters <code>parallel</code> and <code>delay</code> is added to the command parameters to control the execution of the batch commands (nb jobs in parallel and initial delay between jobs). </li> </ul> <p></p>"},{"location":"pywebexec/#swagger-ui","title":"Swagger UI","text":"<p>A custom swagger UI is available at <code>http[s]://&lt;srv&gt;/v0/documentation</code> with enhanced markdown rendering and form generation for body parameters.</p> <p></p> <p></p>"},{"location":"pywebexec/#api-reference","title":"API reference","text":"method route params/payload returns GET /commands/exposed commands: [\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0command: str,\u00a0\u00a0\u00a0\u00a0help: str\u00a0\u00a0},] GET /commands commands: [\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0command_id: uuid\u00a0\u00a0\u00a0\u00a0command: str\u00a0\u00a0\u00a0\u00a0start_time: isotime\u00a0\u00a0\u00a0\u00a0end_time: isotime\u00a0\u00a0\u00a0\u00a0status: str\u00a0\u00a0\u00a0\u00a0exit_code: int\u00a0\u00a0\u00a0\u00a0last_output_line: str\u00a0\u00a0},] GET /commands/{id} command_id: uuidcommand: strparams: array[str]start_time: isotimeend_time: isotimestatus: strexit_code: intlast_output_line: str GET /commands/{id}/output offset: int output: strstatus: strlinks: { next: str } GET /commands/{id}/output_raw offset: int output: stream raw output until end of commandcurl -Ns http://srv/commands/{id}/output_raw POST /commands command: strparams: array[str]rows: intcols: int command_id: uuidmessage: str POST /commands/{cmd} params: array[str]rows: intcols: int command_id: uuidmessage: str PATCH /commands/{id}/stop message: str <ul> <li>to get command output as text (without ANSI codes/Control characters) use: <code>/commands/{id}/output</code> with header <code>\"Accept: text/plain\"</code></li> </ul>"},{"location":"pywebfs/","title":"Pywebfs","text":""},{"location":"pywebfs/#pywebfs","title":"pywebfs","text":"<p>Simple Python HTTP(S) File Server</p>"},{"location":"pywebfs/#install","title":"Install","text":"<pre><code>$ pip install pywebfs\n</code></pre>"},{"location":"pywebfs/#quick-start","title":"Quick start","text":"<ul> <li>start http server sharing current directory listening on 0.0.0.0 port 8080</li> </ul> <pre><code>$ pywebfs\n</code></pre> <ul> <li> <p>Browse/Download/Search files using browser <code>http://&lt;yourserver&gt;:8080</code> </p> </li> <li> <p>search text in files (like grep -ri) </p> </li> </ul>"},{"location":"pywebfs/#features","title":"features","text":"<ul> <li>Serve static files</li> <li>Download folder as zip file</li> <li>Quick filter files</li> <li>Keyboard navigation using arrows</li> <li>Search files by name recursively with multiple word any order</li> <li>Search text in files recursively (disable feature with --nosearch)</li> <li>Basic Auth support (single user)</li> <li>Safe url token Auth</li> <li>HTTPS support</li> <li>HTTPS self-signed certificate generator</li> <li>Display owner/group/permissions (POSIX) (disable feature with --noperm)</li> <li>Can be started as a daemon (POSIX)</li> </ul>"},{"location":"pywebfs/#customize-server","title":"Customize server","text":"<pre><code>$ pywebfs --dir /mydir --title \"my fileserver\" --listen 0.0.0.0 --port 8080\n$ pywebfs -d /mydir -t \"my fileserver\" -l 0.0.0.0 -p 8080\n</code></pre>"},{"location":"pywebfs/#basic-auth-userpassword","title":"Basic auth user/password","text":"<pre><code>$ pywebfs --dir /mydir --user myuser [--password mypass]\n$ pywebfs -d /mydir -u myuser [-P mypass]\n</code></pre> <p>Generated password is given if no <code>--pasword</code> option</p>"},{"location":"pywebfs/#safe-url-token-auth","title":"Safe url token auth","text":"<pre><code>$ pywebfs --dir /mydir --tokenurl\n$ pywebfs --d /mydir --T\n</code></pre> <p>A Token is generated, unless PYWEBFS_TOKEN environment variable is set</p>"},{"location":"pywebfs/#https-server","title":"HTTPS server","text":"<ul> <li>Generate auto-signed certificate and start https server</li> </ul> <pre><code>$ pywebfs --dir /mydir --gencert\n$ pywebfs -d /mydir --g\n</code></pre> <ul> <li>Start https server using existing certificate</li> </ul> <pre><code>$ pywebfs --dir /mydir --cert /pathto/host.cert --key /pathto/host.key\n$ pywebfs -d /mydir -c /pathto/host.cert -k /pathto/host.key\n</code></pre>"},{"location":"pywebfs/#launch-server-as-a-daemon-linux","title":"Launch server as a daemon (Linux)","text":"<pre><code>$ pywebfs start\n$ pywebfs status\n$ pywebfs stop\n</code></pre> <ul> <li>log of server are stored in <code>~/.pywebfs/pwfs_&lt;listen&gt;:&lt;port&gt;.log</code></li> </ul>"},{"location":"pywebfs/#disclaimer","title":"Disclaimer","text":"<p>As built on python http.server, read in the python3 documentation:</p> <p>Warning http.server is not recommended for production. It only implements basic security checks.</p>"},{"location":"redo/","title":"Redo","text":""},{"location":"redo/#redo","title":"redo","text":"<p>bash/zsh interactive history menu / autocompletion replacement for bash/zsh CtlR and Esc/ to search in history and re-execute/re-edit commands.</p>"},{"location":"redo/#usage","title":"usage","text":"<pre><code>$ git clone https://github.com/joknarf/redo\n$ source redo/redo\n</code></pre> <p>or direct source from github repository:</p> <pre><code>$ source &lt;(curl -Ls https://raw.githubusercontent.com/joknarf/redo/main/redo)\n</code></pre> <p>Then on command line:  </p> <ul> <li>ShiftTab or Esc/ or CtlR to access history menu</li> <li>you can put pattern on command line + ShiftTab or Esc/ or CtlR to filter and access history menu</li> <li>in menu enter pattern to filter/re-filter history</li> <li>select command line with arrows or enter number and press enter</li> <li>you can then edit the command line before execution</li> </ul> <p></p>"},{"location":"redo/#keys-in-menu","title":"keys in menu","text":"key action \u21e9 select next item \u21e7 select prev item End/\u21e8 select last item Home/\u21e6 select first item PgUp/CtlF next page PgDn/CtlB previous page Esc exit CtrlA use all screen to display menu Enter/Tab put selected on command line Tab apply filter/new filter Del/F8 delete item from history file <ul> <li>filter pattern can be applied entering text</li> <li>selection can be done entering item number</li> </ul>"},{"location":"redo/#delete-history-commands","title":"delete history commands","text":"<p>To delete command from current shell history and <code>$HISTFILE</code> use <code>redodel</code> command then chose command and press Del or F8.  </p> <p>Using Del/F8 when using redo bind key (Esc/ or CtlR) will not remove command from current shell history (line editing limitation), but the <code>$HISTFILE</code> will be purged from the command.  </p> <p>When deleting history in <code>$HISTFILE</code> using redo bind key, set the following options to ensure the history is not written later in <code>$HISTFILE</code> by shell.</p> <ul> <li> <p>zsh options to set :   <code>zsh   setopt appendhistory   setopt incappendhistory</code></p> </li> <li> <p>bash options to set :   <code>shopt -s histappend cmdlist   PROMPT_COMMAND='history -a'</code></p> </li> </ul>"},{"location":"redo/#limitations","title":"limitations","text":"<ul> <li>zsh on ubuntu 22 : in vi mode, to have Esc/ correctly binded, you need to put in <code>~/.zshenv</code>:   <code>skip_global_compinit=1</code></li> </ul>"},{"location":"run-para/","title":"Run-para","text":""},{"location":"run-para/#run-para","title":"run-para","text":"<p>Parallel jobs manager CLI</p> <ul> <li>POSIX/Linux/MacOS/Windows compatible</li> <li>Launch parallel command and maps list of params to command, with interactive display of the running commands outputs</li> <li>Keep all output in log files</li> <li>Interactive pause/resume/abort jobs, kill stuck command interactively.</li> </ul> <p>Take a look at ssh-para if you need parallel ssh jobs to multiple servers</p> <p></p>"},{"location":"run-para/#installation","title":"installation","text":"<pre><code>pip install run-para\n</code></pre> <p>By default, <code>run-para</code> uses Nerd Fonts glyphs, modern terminals can now render the glyphs without installing specific font (the symbols can be overridden with SSHP_SYM_* environment variables, see below)</p>"},{"location":"run-para/#quick-start","title":"quick start","text":"<pre><code>Run parallel commands:\n$ run-para -P host1 host2 host3 -- ssh -n @1 \"echo @1 is reachable\"\nReview last run results:\n$ run-para -l\nReview hosts statuses for last run:\n$ run-para -L *.status\nView failed hosts list:\n$ run-para -L failed.status\nShow output of command on all hosts:\n$ run-para -L *.out\nShow output of command for failed hosts:\n$ run-para -L *.failed\nShow output of command for host1:\n$ run-para -L host1.out\n</code></pre>"},{"location":"run-para/#params-mapping-to-command","title":"params mapping to command","text":"<p>run-para will match parameters to the command according to <code>@x</code> mapping. using -P options, can only pass 1 parameter to command using -f paramsfile, can pass multiple parameters  </p> <p>example:</p> <pre><code>run-para -P param1 param2 -- echo @1\n</code></pre> <p>will launch:</p> <pre><code>echo param1\necho param2\n</code></pre> <pre><code>run-para -f params.txt -- curl -OL \"http://@1/download/@2\"\nparams.txt:\nserver1 \"the file1.zip\"\nserver2 \"the file2.zip\"\n</code></pre> <p>will launch:</p> <pre><code>curl -OL \"http://server1/download/the file1.zip\"\ncurl -OL \"http://server2/download/the file2.zip\"\n</code></pre>"},{"location":"run-para/#usage","title":"usage","text":"<pre><code>run-para -h\n</code></pre> <pre><code>usage: run-para [-h] [-V] [-j JOB] [-d DIRLOG] [-p PARALLEL] [-t TIMEOUT] [-v] [-D DELAY]\n                [-f PARAMSFILE | -P PARAM [PARAM ...] | -l | -L LOGS [LOGS ...]]\n                [command ...]\n\nrun-para v1.run-para.dev\n\npositional arguments:\n  command\n\noptions:\n  -h, --help            show this help message and exit\n  -V, --version         run-para version\n  -j JOB, --job JOB     Job name added subdir to dirlog\n  -d DIRLOG, --dirlog DIRLOG\n                        directory for ouput log files (default: ~/.run-para)\n  -m MAXWIDTH, --maxwidth MAXWIDTH\n                        max width to use to display params\n  -p PARALLEL, --parallel PARALLEL\n                        parallelism (default 4)\n  -t TIMEOUT, --timeout TIMEOUT\n                        timeout of each job\n  -v, --verbose         verbose display (param + line for last output)\n  -n, --nopause         exit at end of run (no pause for keypress)\n  -D DELAY, --delay DELAY\n                        initial delay in seconds between ssh commands (default=0.3s)\n  -f PARAMSFILE, --paramsfile PARAMSFILE\n                        params list file\n  -P PARAM [PARAM ...], --params PARAM [PARAM ...]\n                        hosts list\n  -C {bash,zsh,powershell}, --completion {bash,zsh,powershell}\n                        autocompletion shell code to source\n  -l, --list            list run-para results/log directories\n  -L LOGS [LOGS ...], --logs LOGS [LOGS ...]\n                        get latest/current run-para run logs\n                        -L[&lt;runid&gt;/]*.out          : all hosts outputs\n                        -L[&lt;runid&gt;/]&lt;host&gt;.out     : command output of host\n                        -L[&lt;runid&gt;/]*.&lt;status&gt;     : command output of hosts &lt;status&gt;\n                        -L[&lt;runid&gt;/]*.status       : hosts lists with status\n                        -L[&lt;runid&gt;/]&lt;status&gt;.status: &lt;status&gt; hosts list\n                        -L[&lt;runid&gt;/]params.list     : list of parms used to map command\n                        default &lt;runid&gt; is latest run-para run (use -j &lt;job&gt; -d &lt;dir&gt; to access logs if used for run)\n                        &lt;status&gt;: [success,failed,timeout,killed,aborted]\n</code></pre> <p>During run, use :</p> <ul> <li>k: to kill command held by a thread</li> <li>p: pause all remaining jobs to be scheduled</li> <li>r: resume scheduling of jobs</li> <li>a: abort all remaining jobs</li> <li>ctrl-c: stop all/exit </li> </ul> <p>Environment variables:</p> <ul> <li>SSHP_SYM_BEG: Symbol character for begin decorative (default: \"\\ue0b4\")</li> <li>SSHP_SYM_END: Symbol character for end decorative (default: \"\\ue0b6\")</li> <li>SSHP_SYM_PROG: Symbol character for progress bar fill (default: \"\\u25a0\")</li> <li>SSHP_SYM_RES: Symbol character before ssh output line (default: \"\\u25b6\")</li> </ul> <p>Activate autocompletion:</p> <ul> <li><code>. &lt;(run-para -C bash)</code></li> <li><code>run-para -C powershell | Out-String | Invoke-Expression</code></li> </ul>"},{"location":"seedee/","title":"Seedee","text":""},{"location":"seedee/#seedee","title":"seedee","text":"<p>Navigate interactively through directories / history of visited directories using arrow keys from command line. Compatibility : bash / ksh / zsh (compatible macos / debian / centos / solaris / alpine ...)</p> <ul> <li>rapidily switch to already visited directories using interactive menu</li> <li>use locate (mlocate/plocate) to rapidly cd to any directory</li> <li>navigate interactively into directories/history using left/right arrow keys in menu</li> <li>directly from command line without any cd command using shift-arrow keys (bash/zsh)</li> <li>cd autocompletion with interactive menu (bash)</li> </ul> <p>for a complete next-gen shell experience, see also these projects:</p> <ul> <li>nerdps1 : auto-transportable dynamic PS1 prompt (you can see it in the demo)</li> <li>redo : replacement of shell history command search (CtrlR or Esc/) with interactive menu</li> <li>complete-ng : nextgen bash completion with interactive menu</li> </ul> <p></p> <ul> <li>using bash/zsh in emacs or vi mode, key binding is available as shortcuts:</li> <li>default key binding with ShiftArrows or CtrlArrows (can be overridden using CD*BIND variables)</li> </ul>   | Left                    | Up/Down                             | Right                       | |:-----------------------:|:-----------------------------------:|:---------------------------:| |                         |  previous dir in history            |                             | |                         | | | |  |   |  | |  parent dir (..)         | dir history browser                | dir browser                 |  directory pattern can be put on command line before hitting shortcut to filter result   putting on command line : `work` and hitting Shift\u25b2 will bring you to last visited directory containing `work`  | key                                         | action                                               | |---------------------------------------------|------------------------------------------------------| |Shift\u25bc                 | cd history menu                                      | |Shift\u25b2                 | return to last directory in history matching pattern | |Shift\u25b6                 | navigate from current directory                      | |Shift\u25c0                 | go to parent dir (cd ..)                             | |CtrlShift\u25bc  | search directories matching pattern in locate db     |   <ul> <li>using bash, <code>&lt;tab&gt;</code> cd auto completion can be enabled for <code>cd</code> command:</li> <li>setting env variable <code>CDCOMPLETE=y</code> before sourcing <code>seedee</code></li> </ul>"},{"location":"seedee/#keys-when-in-menu","title":"keys when in menu","text":"key action \u25bc select next item \u25b2 select prev item End select last item Home select first item \u25b6 browse selected directory \u25c0 browse parent directory Shift\u25b6 browse selected directory with subdirectories depth 4 Shift\u25c0 back to only show subdirectories depth 1 Shift\u25bc/PgUp/CtlF next page Shift\u25b2/PgDn/CtlB previous page Del/F8 delete directory entry in history Esc exit CtrlA use all screen to display menu Enter/Tab go to directory <ul> <li>filter pattern can be applied entering text</li> <li>selection can be done entering item number</li> </ul>"},{"location":"seedee/#usage","title":"usage","text":"<pre><code>$ . ./seedee\n$ cd &lt;dir&gt;\n=&gt; change to &lt;dir&gt; and add &lt;dir&gt; to $CDHISTFILE\n$ cd --\n=&gt; display current history / choose dir to change\n$ cd -- &lt;pat&gt;...\n=&gt; search pattern &lt;pat&gt; in current history, change to dir if unique, display / chose dir either\n$ cd - &lt;pat&gt;...\n=&gt; search pattern &lt;pat&gt; in cd history, change to dir first matched\n$ cd + [&lt;pat&gt;]...\n=&gt; display immediate subdirectories of cwd, search / choose dir to change (except dot dirs, like .git/*)\n$ cd ++ [&lt;pat&gt;]...\n=&gt; display subdirectories until depth 4, search / choose dir to change (except dot dirs, like .git/*)\n$ cdl &lt;pat&gt;...\n=&gt; use locate -r and get list of directories to switch\n</code></pre> <p><code>cd - &lt;opts&gt;</code> <code>cd -- &lt;opts&gt;</code> <code>cd + &lt;opts&gt;</code> <code>cd ++ &lt;opts&gt;</code> are aliases to <code>cd- cd-- cd+ cd++</code></p>"},{"location":"seedee/#environment-variables","title":"environment variables","text":"Variable Description <code>CDHISTFILE</code> path to history file (default to ~/.cd_history) <code>CDNBDIRS</code> Number of directories in history to display (default 10) <code>CDINITDIRS</code> Directory list (\\n separated) to initialize CDHISTFILE if empty <code>CDPOWERLINE</code> set to \"n\" to disable powerline symbol usage <code>CDHISTBIND</code> bind key to cdhist <code>CDDOTBIND</code> bind key to navigate from current dir <code>CDLBIND</code> bind key to cdlocate <code>CDUPIND</code> bind key to cd .. <code>CDLASTBIND</code> bind key to cdhist last dir matching text"},{"location":"selector/","title":"Selector","text":""},{"location":"selector/#selector","title":"selector","text":"<p>Shell interactive menu (bash/zsh/ksh compatible)</p> <p></p>"},{"location":"selector/#usage","title":"usage","text":"<pre><code>usage: selector [-p &lt;prompt&gt;] -i &lt;items&gt;|-f &lt;itemfile&gt; [-P &lt;y|n&gt;]\nargs :\n  -p, --prompt          menu prompt\n  -i, --items           menu items \\n separated\n  -f, --file            file with items\n  -F, --filter          regexp pattern filter items\n  -P, --powerline       y or n, powerline symbol usage\n  -a, --autofilter      y or n, filter at keystrokes\n  -k, --keyfunc         Custom additional key function\n</code></pre> <p>selector can be used as command line or sourced to be used as function (bash/zsh/ksh compatible) When sourced, the selected item is available as <code>$selected</code>.</p>"},{"location":"selector/#demo","title":"demo","text":""},{"location":"selector/#keys","title":"keys","text":"key action \u25bc select next item \u25b2 select prev item End/\u25b6 select last item Home/\u25c0 select first item Shift\u25bc/PgUp/CtlF next page Shift\u25b2/PgDn/CtlB previous page Del/F8 delete item in menu Esc exit CtrlA use all screen to display menu Tab apply/new filter Enter validate item selected <ul> <li>filter pattern can be applied entering text</li> <li>selection can be done entering item number</li> </ul> <p>demo usage at:</p> <ul> <li>seedee : navigate in directories from command line with arrow keys with dir history (bash/zsh/ksh)</li> <li>redo : replacement for CtrlR and Esc/ to search in command history (bash/zsh)</li> <li>complete-ng : bash/zsh command line completion replacement for multiple choices output with interactive menu</li> </ul>"},{"location":"shell-ng/","title":"Shell-ng","text":""},{"location":"shell-ng/#shell-ng","title":"shell-ng","text":"<p>Shell next-gen plugin, the new shell experience (for bash/zsh/ksh) in native shell.</p> <p>All-in-one plugin optimized with joknarf shell command line customizations, includes:</p> Plugin Short description Basic key binding selector Interactive menu used in joknarf plugins (bash/zsh/ksh) nerp Nerd shell prompt (bash/zsh/ksh) redo Command history interactive menu (bash/zsh) Shit-Tab seedee Directory history interactive menu (bash/zsh/ksh) Shift-\u25bc complete-ng Auto-completion interactive menu (bash/zsh) Tab"},{"location":"shell-ng/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>shell-ng is using Nerd Font glyphs, you should install Nerd font on your favorite terminal manager, or it should manage Nerd glyphs</li> <li>Basic standard gnu utilities (sed/awk/grep)</li> </ul>"},{"location":"shell-ng/#usage","title":"Usage","text":"<p>Use a plugin manager or manually source the plugin for your shell.</p> <pre><code>## source shell-ng.plugin.${SHELL##*/}\n</code></pre> <p>Can be easily used with thefly plugin manager/teleporter:</p> <pre><code>## fly add joknarf/shell-ng\n</code></pre> <p>thefly will allow to keep all your plugins available when connecting to remote servers through ssh, and even changing shell and user with sudo.</p>"},{"location":"shell-ng/#demo","title":"Demo","text":""},{"location":"ssh-para/","title":"Ssh-para","text":""},{"location":"ssh-para/#ssh-para","title":"ssh-para","text":"<p>Parallel SSH jobs manager CLI (alternative to parallel-ssh)</p> <ul> <li>POSIX/Linux/MacOS/Windows compatible (with openssh client installed)</li> <li>Launch parallel ssh jobs/scripts on remote hosts, with interactive display of the running commands outputs</li> <li>Keep all output in log files</li> <li>Interactive pause/resume/abort jobs, kill stuck ssh connection interactively.</li> </ul> <p>Take a look at run-para if you need to run parallel jobs parameterized</p> <p></p>"},{"location":"ssh-para/#installation","title":"installation","text":"<pre><code>pip install ssh-para\n</code></pre> <p>By default, <code>ssh-para</code> uses Nerd Fonts glyphs, modern terminals can now render the glyphs without installing specific font (the symbols can be overridden with SSHP_SYM_* environment variables, see below)</p>"},{"location":"ssh-para/#quick-start","title":"quick start","text":"<pre><code>Run command on multiple hosts:\n$ ssh-para -H host1 host2 host3 -- echo connection ok\nReview last run results:\n$ ssh-para -l\nReview hosts statuses for last run:\n$ ssh-para -L *.status\nView failed hosts list:\n$ ssh-para -L failed.status\nShow output of command on all hosts:\n$ ssh-para -L *.out\nShow output of command for failed hosts:\n$ ssh-para -L *.failed\nShow output of command for host1:\n$ ssh-para -L host1.out\n</code></pre>"},{"location":"ssh-para/#usage","title":"usage","text":"<pre><code>ssh-para -h\n</code></pre> <pre><code>usage: ssh-para [-h] [-V] [-j JOB] [-d DIRLOG] [-m MAXDOTS] [-p PARALLEL] [-t TIMEOUT] [-r] [-v] [-D DELAY]\n                [-f HOSTSFILE | -H HOSTS [HOSTS ...] | -C {bash,zsh,powershell} | -l | -L LOGS [LOGS ...]] [-s SCRIPT]\n                [-a ARGS [ARGS ...]]\n                [ssh_args ...]\n\nssh-para v1.ssh-para.dev\n\npositional arguments:\n  ssh_args\n\noptions:\n  -h, --help            show this help message and exit\n  -V, --version         ssh-para version\n  -j JOB, --job JOB     Job name added subdir to dirlog\n  -d DIRLOG, --dirlog DIRLOG\n                        directory for ouput log files (default: ~/.ssh-para)\n  -m MAXDOTS, --maxdots MAXDOTS\n                        hostname domain displaylevel (default:1 =&gt; short hostname, -1 =&gt; fqdn)\n  -p PARALLEL, --parallel PARALLEL\n                        parallelism (default 4)\n  -t TIMEOUT, --timeout TIMEOUT\n                        timeout of each job\n  -r, --resolve         resolve fqdn in SSHP_DOMAINS\n  -v, --verbose         verbose display (fqdn + line for last output)\n  -D DELAY, --delay DELAY\n                        initial delay in seconds between ssh commands (default=0.3s)\n  -f HOSTSFILE, --hostsfile HOSTSFILE\n                        hosts list file\n  -H HOSTS [HOSTS ...], --hosts HOSTS [HOSTS ...]\n                        hosts list\n  -C {bash,zsh,powershell}, --completion {bash,zsh,powershell}\n                        autocompletion shell code to source\n  -l, --list            list ssh-para results/log directories\n  -L LOGS [LOGS ...], --logs LOGS [LOGS ...]\n                        get latest/current ssh-para run logs\n                        -L[&lt;runid&gt;/]*.out          : all hosts outputs\n                        -L[&lt;runid&gt;/]&lt;host&gt;.out     : command output of host\n                        -L[&lt;runid&gt;/]*.&lt;status&gt;     : command output of hosts &lt;status&gt;\n                        -L[&lt;runid&gt;/]*.status       : hosts lists with status\n                        -L[&lt;runid&gt;/]&lt;status&gt;.status: &lt;status&gt; hosts list\n                        -L[&lt;runid&gt;/]hosts.list     : list of hosts used to connect (resolved if -r)\n                        default &lt;runid&gt; is latest ssh-para run (use -j &lt;job&gt; -d &lt;dir&gt; to access logs if used for run)\n                        &lt;status&gt;: [success,failed,timeout,killed,aborted]\n  -s SCRIPT, --script SCRIPT\n                        script to execute\n  -a ARGS [ARGS ...], --args ARGS [ARGS ...]\n                        script arguments\n</code></pre> <p>During run, use :</p> <ul> <li>k: to kill ssh command held by a thread (but remote command can still be running on remote host)</li> <li>p: pause all remaining jobs to be scheduled</li> <li>r: resume scheduling of jobs</li> <li>a: abort all remaining jobs</li> <li>ctrl-c: stop all/exit (but remote commands launched by ssh can still be running on remote servers)</li> </ul> <p>Environment variables:</p> <ul> <li>SSHP_OPTS: ssh default options (Eg: \"-F /home/user/.ssh/myconfig\")</li> <li>SSHP_DOMAINS: dns domains to search when short hostname given (with -r/--resolve option)</li> <li>SSHP_SYM_BEG: Symbol character for begin decorative (default: \"\\ue0b4\")</li> <li>SSHP_SYM_END: Symbol character for end decorative (default: \"\\ue0b6\")</li> <li>SSHP_SYM_PROG: Symbol character for progress bar fill (default: \"\\u25a0\")</li> <li>SSHP_SYM_RES: Symbol character before ssh output line (default: \"\\u25b6\")</li> </ul> <p>Activate autocompletion:</p> <ul> <li><code>. &lt;(ssh-para -C bash)</code></li> <li><code>ssh-para -C powershell | Out-String | Invoke-Expression</code></li> </ul>"},{"location":"ssh-para/#example","title":"Example","text":"<p>Patch redhat family hosts:</p> <pre><code>ssh-para -p 20 -f hostlist.txt -- 'sudo yum update -y;sudo shutdown -r +1'\n</code></pre> <p>Use specific ssh options / config (everything after <code>--</code> will be passed to ssh command as is):</p> <pre><code>ssh-para -p 20 -H host1 host2 -- -F ~/.ssh/myconfig echo connect ok\n</code></pre> <p>Launch local script with argument on remote hosts:</p> <pre><code>ssh-para -p 20 -f hosts.txt -s ./myscript -a status\n</code></pre> <p>Extend limited resolv.conf search domains (try to resolve host in each domain, first resolved in the domain list is used as fqdn):</p> <pre><code>SSHP_DOMAINS=\"domain1.com domain2.com\" ssh-para -r -H host1 host2 -- echo connect ok\n</code></pre>"},{"location":"ssh-para/#tips","title":"Tips","text":"<ul> <li>ssh-para uses ssh BatchMode, no interactive password/passphrase will be asked, so you need to have a ssh authorized key to connect to servers (ssh-agent...)</li> <li>you need to configure your ssh for StrictHostKeyChecking/UserKnownHostsFile if you need to connect to unknown servers</li> <li>to connect as different user use ssh -l option or define everything in your ssh config file</li> <li>you can use user@host as hostname but not if you need to resolve host (-r/--resolve)</li> <li>if you are using ssh ProxyJump server to reach hosts, you may need to tweak the sshd MaxStartups setting on the ssh Proxy server with high parallelism</li> <li>when ssh-para starts, a delay of 0.3 seconds is applied between threads starting ssh jobs to avoid flooding, (can be tweaked with -D ) <li>if you are using remote connexion to launch the ssh-para, use <code>screen</code> to launch ssh-para, as if you lose your connection, ssh-para will be still running and you can re-attach to <code>screen</code> to continue follow-up.</li> <li>Be very carefull when launching massive commands on servers... Always first test on non production.</li>"},{"location":"targpg/","title":"Targpg","text":""},{"location":"targpg/#targpg","title":"targpg","text":"<p>tar command extended with gpg encryption/decryption with password-file</p> <ul> <li>Unlike <code>gpgtar</code> or other tools, just use <code>targpg</code> exactly like <code>tar</code> with all features and standard options of tar.  </li> <li><code>targpg</code> is just using <code>tar</code> <code>-I</code> options for <code>gpg</code> crypt/decrypt as a compression/decompression command.</li> <li>The first option must be <code>-p &lt;password-file&gt;</code></li> </ul> <p>use <code>targpg.compat</code> if your tar command does not accept <code>-I &lt;command&gt;</code> but only <code>-I &lt;prog&gt;</code></p>"},{"location":"targpg/#pre-requisites","title":"pre-requisites","text":"<ul> <li>bash</li> <li>gnu tar</li> <li>gpg</li> </ul>"},{"location":"targpg/#usage","title":"usage","text":"<pre><code>targpg [-p &lt;password-file&gt;] &lt;tar command options&gt;\n</code></pre> <p>if no <code>-p</code> option as first argument, will be prompted for password if using tty</p>"},{"location":"targpg/#examples","title":"examples","text":"<pre><code>$ targpg -p ~/.mypass cvf secrets.tgp --exclude=.git secrets\n$ targpg -p &lt;(echo \"$pass\") cvf secrets.tgp --exclude=.git secrets \n$ targpg -p &lt;(echo \"$pass\") xvf secrets.tgp\n$ targpg xfv secrets.tgp\nPassword:\n</code></pre>"},{"location":"thefly/","title":"Thefly","text":""},{"location":"thefly/#thefly","title":"thefly","text":"<p> bash/zsh/ksh plugin manager and env teleporter  </p> <p>Your shell env and plugins are available everywhere (hosts/users)  bzzz bzzz ! </p>"},{"location":"thefly/#demo","title":"Demo","text":""},{"location":"thefly/#install","title":"Install","text":"<pre><code>. &lt;(curl https://raw.githubusercontent.com/joknarf/thefly/main/thefly) install\n</code></pre> <p>or</p> <pre><code>$ git clone https://github.com/joknarf/thefly\n$ . thefly/thefly install\n</code></pre> <p>Creates ~/.fly.d/fly</p> <p>Add in your rc file (.profile .bash_profile .bashrc .zshrc):</p> <pre><code>. ~/.fly.d/fly source\n</code></pre> <p>Get some help</p> <pre><code>fly help\n</code></pre>"},{"location":"thefly/#add-plugins","title":"Add plugins","text":"<pre><code>fly add joknarf/redo\n</code></pre> <p>clones <code>https://github.com/joknarf/redo</code> in <code>~/.fly.d/plugins/redo</code> and sources the <code>plugin.&lt;shell&gt;</code> (all plugins in <code>~/fly.d/plugins/*/*.plugin.&lt;shell&gt;</code> will be sourced at login with <code>fly source</code> in your shell rc file)</p>"},{"location":"thefly/#teleport-pluginsshell-env","title":"Teleport plugins/shell env","text":"<ul> <li>To another user on current host</li> </ul> <pre><code>$ flyas &lt;user&gt;\nor\n$ fsu &lt;user&gt;\n</code></pre> <p>will duplicate <code>~/.fly.d</code> (without cvs files/tests) in <code>/tmp/.fly.&lt;user&gt;/&lt;flyid&gt;/.fly.d</code> and source all plugins by default uses <code>&lt;user&gt;</code> shell, to force your favorite shell: <code>fsub</code> or <code>bsu</code> (bash) - <code>fsuz</code> or <code>zsu</code> (zsh) - <code>fsuk</code> or <code>ksu</code> (ksh)</p> <ul> <li>To another host/user</li> </ul> <pre><code>$ flyto [&lt;ssh opts&gt;] &lt;user&gt;[&lt;@host&gt;]\nor\n$ fssh [&lt;ssh opts&gt;] &lt;user&gt;[&lt;@host&gt;]\n</code></pre> <p>will duplicate <code>~/.fly.d</code> (without cvs files/tests) in <code>&lt;host&gt;:/tmp/.fly.&lt;user&gt;/&lt;flyid&gt;/.fly.d</code> and source all plugins by default uses <code>&lt;user&gt;</code> shell, to force your favorite shell: <code>fsshb</code> or <code>bto</code> (bash) - <code>fsshz</code> or <code>zto</code> (zsh) - <code>fsshk</code> or <code>kto</code> (ksh)  </p> <ul> <li>To another shell Change current shell and load your env/plugins: <code>$ flysh &lt;shell&gt; # shell in bash ksh zsh</code> or <code>fbash</code> - <code>fzsh</code> - <code>fksh</code> </li> </ul>"},{"location":"thefly/#customize-env","title":"Customize env","text":"<p>Putting your env in <code>~/.fly.d/.flyrc</code> will be automatically sourced (must be compatible with different shells) Putting additional shell specific env in <code>~/.fly.d/.&lt;shellname&gt;rc</code> (.bashrc/.kshrc/.zshrc), will be automatically sourced for shell.</p> <p>anything in <code>~.fly.d</code> will be available through ssh/sudo (flyto/flyas) in <code>$FLY_HOME/.fly.d</code> For example, just put your <code>.vimrc</code> in <code>~/.fly.d</code> and add in <code>~/.fly.d/.flyrc</code>:</p> <pre><code>export VIMINIT=\"source $FLY_HOME/.fly.d/.vimrc\"\n</code></pre> <p>same for <code>.inputrc</code>, put it in <code>~/.fly.d</code> and add in <code>~/.fly.d/.flyrc</code>:</p> <pre><code>export INPUTRC=\"$FLY_HOME/.fly.d/.inputrc\"\n</code></pre> <p>You can crate a <code>.fly.d/bin</code> directory and put scripts you want to teleport and add in your <code>.fly.d/.flyrc</code>:</p> <pre><code>export PATH=\"$PATH:$FLY_HOME/.fly.d/bin\"\n</code></pre>"},{"location":"thefly/#create-your-standalone-fly-package-with-your-full-shell-envplugins","title":"Create your standalone fly package with your full shell env/plugins","text":"<p>save your whole shell environment to use everywhere with standalone fly package. All your ~/.fly.d environment saved in autoextractable file. The fly package enables your env when sourced.</p> <pre><code>$ flypack &gt;fly.pak\n</code></pre> <p>make your fly.pak available through url, to connect to a server with your env, use for example:</p> <pre><code>$ ssh -t &lt;host&gt; '. &lt;(curl -s -L https://raw.githubusercontent.com/joknarf/flypack/main/fly.pak) [install] [bash|ksh|zsh]'\n</code></pre> <p>load your env in current user:</p> <pre><code>$ . &lt;(curl -s -L https://raw.githubusercontent.com/joknarf/flypack/main/fly.pak) [install] [bash|ksh|zsh]\n</code></pre> <p><code>install</code> option to install in user home dir <code>~/.fly.d</code>, default in <code>/tmp/.fly.$USER</code></p>"},{"location":"thefly/#downloadactivate-your-envplugins-from-your-fly-git-repo-or-web-server","title":"Download/activate your env/plugins from your fly git repo or web server","text":"<p>put your .fly.d directory into a git repo and activate all your env/plugins in your current user</p> <pre><code>. &lt;(curl https://raw.githubusercontent.com/joknarf/thefly/main/thefly) install joknarf/myfly\n</code></pre> <p>create a tgz file with your .fly.d exposed on web server and activate env/plugins in your current user</p> <pre><code>. &lt;(curl https://raw.githubusercontent.com/joknarf/thefly/main/thefly) install https://myserver/myfly\n</code></pre>"},{"location":"thefly/#connect-using-thefly-envplugins-from-httpgit-repo","title":"Connect using thefly env/plugins from http/git repo","text":"<p>uses user ~.fly.d to load env/plugins</p> <pre><code>$ ssh -t &lt;user&gt;@&lt;host&gt; '. &lt;(curl https://raw.githubusercontent.com/joknarf/thefly/main/thefly) remote'  \n</code></pre> <p>get env/plugins from .fly.d tgz (contains .fly.d/*)</p> <pre><code>$ ssh -t &lt;user&gt;@&lt;host&gt; '. &lt;(curl https://raw.githubusercontent.com/joknarf/thefly/main/thefly) remote &lt;url .fly.d.tgz&gt;'  \n</code></pre> <p>get env/plugins from github repository (repo contains .fly.d contents, and can contain plugins submodules)</p> <pre><code>$ ssh -t &lt;user&gt;@&lt;host&gt; '. &lt;(curl https://raw.githubusercontent.com/joknarf/thefly/main/thefly) remote &lt;git owner/repo .fly.d&gt;'  \n</code></pre>"},{"location":"thefly/#set-your-joknarf-cool-plugins-env","title":"Set your joknarf cool plugins env","text":"<pre><code>$ fly add joknarf/nerdp        # bash/ksh/zsh nerd prompt\n$ fly add joknarf/seedee       # bash/ksh/zsh cd history\n$ fly add joknarf/redo         # bash/zsh     command history\n$ fly add joknarf/complete-ng  # bash/zsh     completion next-gen\nor just add the optimized compilation of these shell plugins using just:\n$ fly add joknarf/shell-ng\n\n$ fly add joknarf/pgtree       # bash/ksh/zsh process hierarchy\n</code></pre> link description nerdp nerd dynamic customizable nice prompt seedee access/search dir history with ctrl or shift down arrow, and many more redo access/search shell history command menu with shift-tab, and many more complete-ng autocompletion with interactive menu shell-ng optimized joknarf compilation of the above plugins pgtree process search / tree / kill command line"},{"location":"thefly/#dont-teleport-a-human-with-your-fly","title":"Don't teleport a human with your fly !","text":"<p>Remember that ~/.fly.d directory will be duplicated in /tmp when teleporting, don't put huge data in your ~/.fly.d directory, the consequences could be dramatic ! (ask Jeff G. ;-)</p> <p>Bzzz Bzzz</p>"}]}